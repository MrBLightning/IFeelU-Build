{"version":3,"sources":["serviceWorker.js","toggle.js","Page.js","graph.js","navbar.js","index.js"],"names":["Boolean","window","location","hostname","match","Toggle","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","checked","initToggle","_this2","react_default","a","createElement","className","toggleName","lib_default","onColor","onChange","setState","React","Component","Page","_ref","id","params","Chart","require","Graph","renderExtraText","array","index","adedText","extraText","myLabels","myDataPain","myDataGeneralFeeling","GeneralFeelingTexts","PainTexts","toDate","daysdifference","date1","date2","date1_ms","getTime","date2_ms","difference_ms","Math","abs","round","dateStr","Date","node","fetch","then","response","json","data","GeneralFeelingIsMarked","PainIsMarked","GeneralFeelingLastValue","PainLastValue","currDateCombo","currDate","i","length","dateTimeCombo","date","toLocaleString","undefined","day","month","year","check","includes","tempDate","setDate","getDate","push","RecordTracking","ExtraText","console","log","myChart","type","labels","datasets","label","backgroundColor","borderColor","fill","options","legend","position","boxWidth","onClick","evt","item","thisPoint","getElementAtEvent","_chart","legendItems","_datasetIndex","text","addedText","_index","scales","scaleOverride","scaleSteps","scaleStepWidth","scaleStartValue","yAxes","ticks","beginAtZero","max","min","stepSize","xAxes","minRotation","maxRotation","pan","enabled","mode","zoom","_this3","ref","Navbar","cName","isToggleOn","BrowserRouter","href","src","alt","toggleState","htmlFor","Link","to","Route","exact","path","component","Home","toggle","PageWrap","navbar","ReactDOM","render","src_PageWrap","pageWrapId","outerContainerId","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a1389a3b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport Switch from 'react-ios-switch';\r\n\r\nclass Toggle extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            checked: true,\r\n        };\r\n        if (this.props.initToggle === \"true\") {\r\n            this.state = {\r\n                checked: true,\r\n            };\r\n            // console.dir(this.props.toggleName + \" \" + this.props.initToggle + \" \" + setState);\r\n          } else {\r\n            this.state = {\r\n                checked: false,\r\n            };\r\n            //console.dir(this.props.toggleName + \" \" + this.props.initToggle + \" \" + setState);\r\n          } \r\n    }\r\n\r\n    render() {\r\n        const { checked } = this.state;\r\n        //console.dir(this.props.toggleName + \" \" + this.props.initToggle + \" \" + this.state.checked);\r\n\r\n        return (\r\n            <div className=\"trackItem\">\r\n                <div className=\"trackName\">{this.props.toggleName}</div>\r\n                <Switch\r\n                    checked={checked}\r\n                    onColor=\"#22aee4\"\r\n                    className=\"switch\"\r\n                    onChange={checked => this.setState({ checked })}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Toggle;","import React from 'react';\r\n\r\nconst Page = ({ match }) => {\r\n\r\n    return (\r\n        <div className=\"pageContent\" id=\"pageContent\">\r\n            <div className=\"pageTopText\">\r\n            Page ID {match.params.id}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Page","import React from 'react';\r\n/*To enable Pan and Zoom that are defined in chartjs-plugin-zoom*/\r\nimport * as zoom from 'chartjs-plugin-zoom';\r\n// import { finished } from 'stream';\r\n\r\nvar Chart = require(\"chart.js\");\r\n\r\nclass Graph extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {myLabels:[], myDataPain:[], myDataGeneralFeeling:[], GeneralFeelingTexts:[], PainTexts:[], extraText:''};\r\n    }\r\n    \r\n    renderExtraText = (array, index, adedText) => {\r\n        this.setState({ extraText: adedText + array[index]});\r\n    }\r\n\r\n    async componentDidMount() {\r\n        //function to convert string in the format of yyyy-mm-dd into a valid date object\r\n        function toDate(dateStr) {\r\n            return new Date(dateStr)\r\n        }\r\n        //function to get the number of days differentiating two dates given as strings of format dd/mm/yyyy\r\n        function daysdifference(date1, date2) {\r\n            // The number of milliseconds in one day\r\n            var ONEDAY = 1000 * 60 * 60 * 24;\r\n            // Convert both dates to milliseconds\r\n            var date1_ms = toDate(date1).getTime();\r\n            var date2_ms = toDate(date2).getTime();\r\n            // Calculate the difference in milliseconds\r\n            var difference_ms = Math.abs(date1_ms - date2_ms);\r\n\r\n            // Convert back to days and return\r\n            return Math.round(difference_ms/ONEDAY);\r\n        }\r\n        const node = this.node;\r\n        //await fetch('http://localhost:4000/fetch/Ilana').then(response => {\r\n        await fetch('/fetch/Ilana').then(response => {\r\n            return response.json();\r\n        }).then(data => {\r\n            //console.log(data);\r\n            let GeneralFeelingIsMarked = false;\r\n            let PainIsMarked = false;\r\n            let GeneralFeelingLastValue = 0;\r\n            let PainLastValue = 0; \r\n            let currDateCombo = \"\";\r\n            let currDate = \"\";\r\n            for (var i = 0; i < data.length; i++) {\r\n                //console.dir(data[i]);\r\n                let dateTimeCombo = toDate(data[i].date).toLocaleString(undefined, {\r\n                    day: 'numeric',\r\n                    month: 'short',\r\n                    year: '2-digit',\r\n                }) + \".\" + data[i].check;\r\n                if (this.state.myLabels.includes(dateTimeCombo) === false) {\r\n                    while(daysdifference(data[i].date , currDate) > 1){\r\n                        //console.log(\"D1: \" + data[i].date + \" D2: \" + currDate + \" \" + daysdifference(data[i].date , currDate));\r\n                        let tempDate = new Date(toDate(currDate));\r\n                        tempDate.setDate(tempDate.getDate() + 1);\r\n                        //this currDate worked with the old date string of dd/mm/yyyy\r\n                        //currDate =  (\"0\" + (tempDate.getDate())).slice(-2) + \"/\" + (\"0\" + (tempDate.getMonth() + 1)).slice(-2) + \"/\" + tempDate.getFullYear();  \r\n                        //this currDate works with the new date string of yyyy-mm-dd\r\n                        currDate =  tempDate.toLocaleString(undefined, {\r\n                            day: 'numeric',\r\n                            month: 'short',\r\n                            year: '2-digit',\r\n                        });   \r\n                        this.state.myLabels.push(currDate);\r\n                        if (GeneralFeelingIsMarked === false) {\r\n                            this.state.myDataGeneralFeeling.push(GeneralFeelingLastValue);\r\n                            this.state.GeneralFeelingTexts.push(\" \");\r\n                        }\r\n                        if (PainIsMarked === false) {\r\n                            this.state.myDataPain.push(PainLastValue);\r\n                            this.state.PainTexts.push(\" \");\r\n                        }\r\n                        GeneralFeelingIsMarked = false;\r\n                        PainIsMarked = false;\r\n                    }\r\n                    this.state.myLabels.push(dateTimeCombo);\r\n                    if(currDateCombo !== dateTimeCombo && currDateCombo !== \"\"){\r\n                        if (GeneralFeelingIsMarked === false) {\r\n                            this.state.myDataGeneralFeeling.push(GeneralFeelingLastValue);\r\n                            this.state.GeneralFeelingTexts.push(\" \");\r\n                        }\r\n                        if (PainIsMarked === false) {\r\n                            this.state.myDataPain.push(PainLastValue);\r\n                            this.state.PainTexts.push(\" \");\r\n                        }\r\n                    }\r\n                    currDate = data[i].date;\r\n                    currDateCombo = dateTimeCombo;\r\n                    GeneralFeelingIsMarked = false;\r\n                    PainIsMarked = false;\r\n                }\r\n                if(data[i].RecordTracking === 'GeneralFeeling'){\r\n                    this.state.myDataGeneralFeeling.push(data[i].state);\r\n                    this.state.GeneralFeelingTexts.push(data[i].ExtraText);\r\n                    GeneralFeelingLastValue = data[i].state;\r\n                    GeneralFeelingIsMarked = true;\r\n                } \r\n                if(data[i].RecordTracking === 'Pain'){\r\n                    this.state.myDataPain.push(data[i].state);\r\n                    this.state.PainTexts.push(data[i].ExtraText);\r\n                    PainLastValue = data[i].state;\r\n                    PainIsMarked = true;\r\n                }             \r\n            }\r\n            if (GeneralFeelingIsMarked === false) {\r\n                this.state.myDataGeneralFeeling.push(GeneralFeelingLastValue);\r\n                this.state.GeneralFeelingTexts.push(\" \");\r\n            }\r\n            if (PainIsMarked === false) {\r\n                this.state.myDataPain.push(PainLastValue);\r\n                this.state.PainTexts.push(\" \");\r\n            }\r\n            //console.log(this.state.myLabels);\r\n            //console.log(this.state.myDataPain);\r\n            //console.log(this.state.myDataGeneralFeeling);\r\n            //console.log(this.state.GeneralFeelingTexts);\r\n            //console.log(this.state.PainTexts);\r\n            //this.setState(data)\r\n        })\r\n\r\n        console.log(this.state.myLabels.length);\r\n\r\n        let myChart = new Chart(node, {\r\n            type: \"line\",\r\n            data: {\r\n                labels: this.state.myLabels,\r\n                // [\"1/1/19 10:00\", \"2/1/19 19:00\", \"3/1/19\", \"4/1/19\", \"5/1/19\", \"6/1/19\",\r\n                //          \"7/1/19\",\"8/1/19\", \"9/1/19\", \"10/1/19\", \"11/1/19\", \"12/1/19\", \r\n                //          \"13/1/19\", \"14/1/19\"],\r\n                datasets: [\r\n                    {\r\n                        label: \"Pain\",\r\n                        data: this.state.myDataPain,\r\n                        //[5, 5, 4, 3, 1, 2, 3, 4, 3, 1, 2, 3, 4, 3],\r\n                        backgroundColor: [\r\n                            \"#c45850\"\r\n                        ],\r\n                        borderColor: \"#c45850\",\r\n                        fill: false\r\n                    },\r\n                    {\r\n                        label: \"General Feeling\",\r\n                        data: this.state.myDataGeneralFeeling,\r\n                        //[4, 4, 3, 3, 3, 2, 1, 5, 4, 3, 1, 2, 3, 4],\r\n                        backgroundColor: [\r\n                            \"#3e95cd\"\r\n                        ],\r\n                        borderColor: \"#3e95cd\",\r\n                        fill: false\r\n                    },\r\n                    {\r\n                        label: \"Test1\",\r\n                        data: [5, 5, 4, 3, 1, 2, 3, 4, 3, 1, 2, 3, 4, 3, 3, 1, 2, 3, 4, 3],\r\n                        backgroundColor: [\r\n                            \"#7f22e8\"\r\n                        ],\r\n                        borderColor: \"#7f22e8\",\r\n                        fill: false\r\n                    },\r\n                    {\r\n                        label: \"Test2\",\r\n                        data: [4, 4, 3, 3, 3, 2, 1, 5, 4, 3, 1, 2, 3, 4, 3, 2, 1, 5, 4,],\r\n                        backgroundColor: [\r\n                            \"#eb94db\"\r\n                        ],\r\n                        borderColor: \"#eb94db\",\r\n                        fill: false\r\n                    }                    \r\n                ]\r\n            },\r\n            options: {\r\n                // title: {\r\n                //     display: true,\r\n                //     text: 'Symptoms Over Time'\r\n                //   },\r\n                legend: {position:\"top\", labels:{boxWidth: 10}},\r\n                'onClick' : (evt, item) => { \r\n                    var thisPoint = myChart.getElementAtEvent(evt)[0];\r\n                    //var day = item[0]['_model'].label this.selectedDay = day this.renderHourlyBarChart();\r\n                    if(thisPoint !== undefined){\r\n                        //console.log(thisPoint);\r\n                        //console.log(thisPoint._chart.legend.legendItems[thisPoint._datasetIndex].text);\r\n                        //console.log(thisPoint._index);\r\n                        if(thisPoint._chart.legend.legendItems[thisPoint._datasetIndex].text === \"General Feeling\"){\r\n                            let addedText = \"On \" + this.state.myLabels[thisPoint._index] + \", concerning your General Feeling you wrote: \";\r\n                            this.renderExtraText(this.state.GeneralFeelingTexts, thisPoint._index, addedText);\r\n                        }\r\n                        if(thisPoint._chart.legend.legendItems[thisPoint._datasetIndex].text === \"Pain\"){\r\n                            let addedText = \"On \" + this.state.myLabels[thisPoint._index] + \", concerning your Pain you wrote: \";\r\n                            this.renderExtraText(this.state.PainTexts, thisPoint._index, addedText);\r\n                        }\r\n                    } \r\n                },\r\n                scales: {\r\n                    scaleOverride : true,\r\n                    scaleSteps : 1,\r\n                    scaleStepWidth : 1,\r\n                    scaleStartValue : 0,\r\n                    // xAxes: [{\r\n                    //     type: \"time\",\r\n                    //     time: {\r\n                    //       unit: 'hour',\r\n                    //       unitStepSize: 12,\r\n                    //       round: 'hour',\r\n                    //       tooltipFormat: \"h:mm:ss a\",\r\n                    //       displayFormats: {\r\n                    //         hour: 'MMM D, h:mm A'\r\n                    //       }\r\n                    //     }\r\n                    //   }],\r\n                    yAxes: [{\r\n                        ticks: {\r\n                            beginAtZero: true,\r\n                            max: 5,\r\n                            min: 1,\r\n                            stepSize: 1 \r\n                        }\r\n                    }],\r\n                    xAxes: [{\r\n                        ticks: {\r\n                            minRotation: 0,\r\n                            maxRotation: 0 \r\n                        }\r\n                    }]\r\n                },\r\n                // Container for pan options\r\n                pan: {\r\n                    // Boolean to enable panning\r\n                    enabled: true,\r\n\r\n                    // Panning directions. Remove the appropriate direction to disable \r\n                    // Eg. 'y' would only allow panning in the y direction\r\n                    mode: 'x'\r\n                },\r\n\r\n                // Container for zoom options\r\n                zoom: {\r\n                    // Boolean to enable zooming\r\n                    enabled: true,\r\n\r\n                    // Zooming directions. Remove the appropriate direction to disable \r\n                    // Eg. 'y' would only allow zooming in the y direction\r\n                    mode: 'x',\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"pageContent\" id=\"pageContent\">\r\n                <canvas className=\"graphContent\"\r\n                    // style={{ width: 300, height: 300 }}\r\n                    ref={node => (this.node = node)}\r\n                />\r\n                <div className=\"extraText\">\r\n                    {this.state.extraText}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Graph;","import React from 'react';\r\n// import ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\n/*Toggle is the Toggle select element */\r\nimport Toggle from './toggle';\r\n/*Page is where I define the different pages */\r\nimport Page from './Page';\r\n/*Graph is where I define the graph class */\r\nimport Graph from './graph';\r\n/*BrowserRouter and so on are elements of react-router-dom to enable Routing  */\r\nimport { BrowserRouter as Router, Link, Route } from 'react-router-dom';\r\n\r\nclass Navbar extends React.Component {\r\n    // constructor(props) {\r\n    //     super(props);\r\n    // }\r\n\r\n    render() {\r\n        let cName;\r\n        if (this.props.isToggleOn) { cName = \"sidebarMenuShadow\" }\r\n        else { cName = \"\" }\r\n\r\n        return (\r\n            <Router>\r\n                <div>\r\n                    <div className=\"header\">\r\n                        <div className=\"headerText\">IFEELU</div>\r\n                        <div className=\"logo\">\r\n                            <a href=\"https://www.youtube.com/\">\r\n                                <img src=\"https://drive.google.com/uc?id=14MW9Z9pz9of-krcV5qLRLs_gvjmE1Sny\" alt=\"IFeelU Logo\" />\r\n                            </a>\r\n                        </div>\r\n                    </div>\r\n                    <input type=\"checkbox\" className=\"openSidebarMenu\" id=\"openSidebarMenu\"\r\n                        /*setState changes the state and re-renders the page on changes */\r\n                        onClick={this.props.toggleState} checked={this.props.isToggleOn}\r\n                        onChange={this.props.toggleState}/>\r\n                    <label htmlFor=\"openSidebarMenu\" className=\"sidebarIconToggle\">\r\n                        <div className=\"spinner diagonal part-1\"></div>\r\n                        <div className=\"spinner horizontal\"></div>\r\n                        <div className=\"spinner diagonal part-2\"></div>\r\n                    </label>\r\n                    {/* {console.log(this.state.isToggleOn + \" \" + cName)} */}\r\n                    <div id=\"sidebarMenu\" className={cName}>\r\n                        <ul className=\"sidebarMenuInner\">\r\n                            {/*<Link> changes the URL*/}\r\n                            <li onClick={this.props.toggleState}>\r\n                                <Link to={`/`}>Barak Brudo <span>Web Developer</span></Link></li>\r\n                            <li onClick={this.props.toggleState}>\r\n                                <Link to={`/graph`}>Graph</Link></li>\r\n                            <li onClick={this.props.toggleState}>\r\n                                <Link to={`/pages/Instagram`}>Instagram</Link></li>\r\n                            <li onClick={this.props.toggleState}>\r\n                                <Link to={`/pages/Twitter`}>Twitter</Link></li>\r\n                            <li onClick={this.props.toggleState}>\r\n                                <Link to={`/pages/YouTube`}>YouTube</Link></li>\r\n                            <li onClick={this.props.toggleState}>\r\n                                <Link to={`/pages/Linkedin`}>Linkedin</Link></li>\r\n                        </ul>\r\n                    </div>\r\n                    <div className='wrapper'>\r\n                        {/*<Route> changes the content of this div (wrapper) based onb the URL*/}\r\n                        <Route exact={true} path='/' component={Home} />\r\n                        <Route path='/pages/:id' component={Page} />\r\n                        <Route exact={true} path='/:id' component={Graph} />\r\n                    </div>\r\n                </div>\r\n            </Router>\r\n        );\r\n    }\r\n}\r\n\r\nconst Home = ({ match }) => {\r\n    return (\r\n        <div className=\"pageContent\" id=\"pageContent\">\r\n            <div className=\"pageTopText\">I would like to track:</div>\r\n            <div className=\"trackBox\">\r\n                <Toggle toggleName={\"General Feeling\"} initToggle={\"true\"} />\r\n                <Toggle toggleName={\"Appetite\"} initToggle={\"false\"} />\r\n                <Toggle toggleName={\"Nausea\"} initToggle={\"false\"} />\r\n                <Toggle toggleName={\"Bowel Movements\"} initToggle={\"false\"} />\r\n                <Toggle toggleName={\"Motivation\"} initToggle={\"false\"} />\r\n                <Toggle toggleName={\"Pain\"} initToggle={\"true\"} />\r\n                <Toggle toggleName={\"Dizziness\"} initToggle={\"false\"} />\r\n                <Toggle toggleName={\"Exhaustion\"} initToggle={\"false\"} />\r\n            </div>\r\n            <div className=\"buttonArea\">\r\n                <button className=\"button buttonBack\">Back</button>\r\n                <button className=\"button buttonNext\">Next</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Navbar;","//This is the main page f the app\n//Start this app by typing: 'npm start' in a terminal \nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n/*Navbar is the navbar for all pages */\nimport Navbar from './navbar';\n\n/*PageWrap is the class encomassing all the pages wrapped in <Router>. \nThe Nav bar is always ther and under it are the various pages represented by\n<Route.. */\nclass PageWrap extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { isToggleOn: false };\n    }\n\n    toggleState = () => {\n        this.setState({ isToggleOn: !this.state.isToggleOn });\n    }\n\n    render() {\n        // let cName;\n        // if (this.state.isToggleOn) { cName = \"sidebarMenuShadow\" }\n        // else { cName = \"\" }\n\n        return (\n            <div>\n                <Navbar toggleState={this.toggleState} isToggleOn={this.state.isToggleOn}/>\n            </div>\n        );\n    }\n}\n\n\nfunction main() {\n    return (\n        <div id=\"App\">\n            <PageWrap pageWrapId={\"pageContent\"} outerContainerId={\"App\"} />\n        </div>\n    );\n}\n\nReactDOM.render(main(), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}