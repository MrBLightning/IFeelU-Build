{"version":3,"sources":["serviceWorker.js","toggle.js","Page.js","graph.js","navbar.js","index.js"],"names":["Boolean","window","location","hostname","match","Toggle","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","checked","initToggle","_this2","react_default","a","createElement","className","toggleName","lib_default","onColor","onChange","setState","React","Component","Page","_ref","id","params","Chart","require","Graph","renderExtraText","array","index","adedText","extraText","currentComponent","GeneralFeelingIsMarked","AppetiteIsMarked","NauseaIsMarked","BowelMovementsIsMarked","MotivationIsMarked","PainIsMarked","DizzinessIsMarked","ExhaustionIsMarked","GeneralFeelingLastValue","AppetiteLastValue","NauseaLastValue","BowelMovementsLastValue","MotivationLastValue","PainLastValue","DizzinessLastValue","ExhaustionLastValue","currDateCombo","currDate","myLabels","myDataGeneralFeeling","GeneralFeelingTexts","myDataAppetite","AppetiteTexts","myDataNausea","NauseaTexts","myDataBowelMovements","BowelMovementsTexts","myDataMotivation","MotivationTexts","myDataPain","PainTexts","myDataDizziness","DizzinessTexts","myDataExhaustion","ExhaustionTexts","GeneralFeelingToggle","PainToggle","node","toDate","dateStr","Date","daysdifference","date1","date2","date1_ms","getTime","date2_ms","difference_ms","Math","abs","round","fetchUserData","_x","_fetchUserData","apply","arguments","asyncToGenerator","regenerator_default","mark","_callee","userId","URL","wrap","_context","prev","next","fetch","then","response","json","data","lng","length","i","dateTimeCombo","date","toLocaleString","undefined","day","month","year","check","includes","tempDate","setDate","getDate","push","RecordTracking","ExtraText","stop","fillChartData","datasetsData","datasetsText","label","backgroundColor","borderColor","borderWidth","fill","pointRadius","pointHoverRadius","pointHitRadius","myChart","type","labels","datasets","options","legend","position","boxWidth","onClick","evt","item","thisPoint","getElementAtEvent","_chart","legendItems","_datasetIndex","text","addedText","_index","scales","scaleOverride","scaleSteps","scaleStepWidth","scaleStartValue","yAxes","ticks","beginAtZero","max","min","stepSize","xAxes","minRotation","maxRotation","pan","enabled","mode","zoom","_commitGraph","_callee2","UserId","_context2","console","log","_x2","commitGraph","ref","Navbar","cName","isToggleOn","BrowserRouter","href","src","alt","toggleState","htmlFor","Link","to","Route","exact","path","component","Home","toggle","PageWrap","navbar","ReactDOM","render","src_PageWrap","pageWrapId","outerContainerId","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,gFCuBSC,cArCX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACTC,SAAS,GAEiB,SAA1BR,EAAKD,MAAMU,WACXT,EAAKO,MAAQ,CACTC,SAAS,GAIbR,EAAKO,MAAQ,CACTC,SAAS,GAbFR,wEAmBV,IAAAU,EAAAP,KACGK,EAAYL,KAAKI,MAAjBC,QAGR,OACIG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAaX,KAAKJ,MAAMgB,YACvCJ,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,CACIJ,QAASA,EACTS,QAAQ,UACRH,UAAU,SACVI,SAAU,SAAAV,GAAO,OAAIE,EAAKS,SAAS,CAAEX,uBA/BpCY,IAAMC,WCUZC,EAXF,SAAAC,GAAe,IAAZ1B,EAAY0B,EAAZ1B,MAEZ,OACIc,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcU,GAAG,eAC5Bb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAf,WACSjB,EAAM4B,OAAOD,+BCF9BE,UAAQC,EAAQ,KA2ZLC,cAxZX,SAAAA,EAAY7B,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAyB,IACf5B,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA2B,GAAAtB,KAAAH,KAAMJ,KAKV8B,gBAAkB,SAACC,EAAOC,EAAOC,GAC7BhC,EAAKmB,SAAS,CAAEc,UAAWD,EAAWF,EAAMC,MAL5C/B,EAAKO,MAAQ,CAAC0B,UAAU,IAFTjC,mFAWf,IAAIkC,EAAmB/B,KAInBgC,GAAyB,EACzBC,GAAmB,EACnBC,GAAiB,EACjBC,GAAyB,EACzBC,GAAqB,EACrBC,GAAe,EACfC,GAAoB,EACpBC,GAAqB,EAErBC,EAA0B,EAC1BC,EAAoB,EACpBC,EAAkB,EAClBC,EAA0B,EAC1BC,EAAsB,EACtBC,EAAgB,EAChBC,EAAqB,EACrBC,EAAsB,EAItBC,EAAgB,GAChBC,EAAW,GAGXC,EAAW,GAIjBC,EAAuB,GACvBC,EAAsB,GAChBC,EAAiB,GACvBC,EAAgB,GAChBC,EAAe,GACTC,EAAc,GACpBC,EAAuB,GACjBC,EAAsB,GAC5BC,EAAmB,GACbC,EAAkB,GACxBC,EAAa,GACPC,EAAY,GAClBC,EAAkB,GACZC,EAAiB,GACvBC,EAAmB,GACbC,EAAkB,GAKxBC,GAAuB,EAKjBC,GAAa,EAIXC,EAAOrE,KAAKqE,KAIlB,SAASC,EAAOC,GACZ,OAAO,IAAIC,KAAKD,GAGpB,SAASE,EAAeC,EAAOC,GAE3B,IAEIC,EAAWN,EAAOI,GAAOG,UACzBC,EAAWR,EAAOK,GAAOE,UAEzBE,EAAgBC,KAAKC,IAAIL,EAAWE,GAGxC,OAAOE,KAAKE,MAAMH,EARL,OAxED,SAoFPI,EApFOC,GAAA,OAAAC,EAAAC,MAAAtF,KAAAuF,WAAA,SAAAF,IAAA,OAAAA,EAAAvF,OAAA0F,EAAA,EAAA1F,CAAA2F,EAAAhF,EAAAiF,KAoFtB,SAAAC,EAA6BC,GAA7B,IAAAC,EAAA,OAAAJ,EAAAhF,EAAAqF,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAEKJ,EAAM,SAAWD,EAFtBG,EAAAE,KAAA,EAGgBC,MAAML,GAAKM,KAAK,SAAAC,GACtB,OAAOA,EAASC,SACtBF,KAAK,SAAAG,GASK,IAHZ,IAAIC,EAAMD,EAAKE,OAGMC,EAAI,EAAGA,EAAIF,EAAKE,IAAK,CACzC,IAAIC,EAAgBpC,EAAOgC,EAAKG,GAAGE,MAAMC,oBAAeC,EAAW,CAClEC,IAAK,UACLC,MAAO,QACPC,KAAM,YACF,IAAMV,EAAKG,GAAGQ,MACnB,IAAyC,IAArC/D,EAASgE,SAASR,GAA0B,CAC/C,KAAMjC,EAAe6B,EAAKG,GAAGE,KAAO1D,GAAY,GAAE,CACjD,IAAIkE,EAAW,IAAI3C,KAAKF,EAAOrB,IAC/BkE,EAASC,QAAQD,EAASE,UAAY,GAEtCpE,EAAYkE,EAASP,oBAAeC,EAAW,CAC9CC,IAAK,UACLC,MAAO,QACPC,KAAM,YAEP9D,EAASoE,KAAKrE,IACiB,IAA3BjB,IACHmB,EAAqBmE,KAAK9E,GAC1BY,EAAoBkE,KAAK,OAEiB,IAArBrF,IACAoB,EAAeiE,KAAK7E,GACpBa,EAAcgE,KAAK,OAEA,IAAnBpF,IACAqB,EAAa+D,KAAK5E,GAClBc,EAAY8D,KAAK,OAEU,IAA3BnF,IACAsB,EAAqB6D,KAAK3E,GACzBe,EAAoB4D,KAAK,OAEH,IAAvBlF,IACAuB,EAAiB2D,KAAK1E,GACtBgB,EAAgB0D,KAAK,OAEJ,IAAjBjF,IACAwB,EAAWyD,KAAKzE,GAChBiB,EAAUwD,KAAK,OAEO,IAAtBhF,IACAyB,EAAgBuD,KAAKxE,GACrBkB,EAAesD,KAAK,OAEG,IAAvB/E,IACA0B,EAAiBqD,KAAKvE,GACtBmB,EAAgBoD,KAAK,MAEzBtF,GAAyB,EACzBC,GAAmB,EACnBC,GAAiB,EACjBC,GAAyB,EACxBC,GAAqB,EACtBC,GAAe,EACfC,GAAoB,EACpBC,GAAqB,EAEzBW,EAASoE,KAAKZ,GACX1D,IAAkB0D,GAAmC,KAAlB1D,KACH,IAA3BhB,IACAmB,EAAqBmE,KAAK9E,GAC1BY,EAAoBkE,KAAK,OAEJ,IAArBrF,IACAoB,EAAeiE,KAAK7E,GACpBa,EAAcgE,KAAK,OAEA,IAAnBpF,IACAqB,EAAa+D,KAAK5E,GAClBc,EAAY8D,KAAK,OAEU,IAA3BnF,IACAsB,EAAqB6D,KAAK3E,GAC1Be,EAAoB4D,KAAK,OAEF,IAAvBlF,IACAuB,EAAiB2D,KAAK1E,GACtBgB,EAAgB0D,KAAK,OAEJ,IAAjBjF,IACAwB,EAAWyD,KAAKzE,GAChBiB,EAAUwD,KAAK,OAEO,IAAtBhF,IACAyB,EAAgBuD,KAAKxE,GACrBkB,EAAesD,KAAK,OAEG,IAAvB/E,IACC0B,EAAiBqD,KAAKvE,GACvBmB,EAAgBoD,KAAK,OAG7BrE,EAAWqD,EAAKG,GAAGE,KACnB3D,EAAgB0D,EAChB1E,GAAyB,EACzBC,GAAmB,EACnBC,GAAiB,EACjBC,GAAyB,EACzBC,GAAqB,EACrBC,GAAe,EACfC,GAAoB,EACpBC,GAAqB,EAEK,mBAA3B+D,EAAKG,GAAGc,iBACPpE,EAAqBmE,KAAKhB,EAAKG,GAAGrG,OAClCgD,EAAoBkE,KAAKhB,EAAKG,GAAGe,WACjChF,EAA0B8D,EAAKG,GAAGrG,MAClC4B,GAAyB,GAEC,aAA3BsE,EAAKG,GAAGc,iBACPlE,EAAeiE,KAAKhB,EAAKG,GAAGrG,OAC5BkD,EAAcgE,KAAKhB,EAAKG,GAAGe,WAC3B/E,EAAoB6D,EAAKG,GAAGrG,MAC5B6B,GAAmB,GAEO,WAA3BqE,EAAKG,GAAGc,iBACPhE,EAAa+D,KAAKhB,EAAKG,GAAGrG,OAC1BoD,EAAY8D,KAAKhB,EAAKG,GAAGe,WACzB9E,EAAkB4D,EAAKG,GAAGrG,MAC1B8B,GAAiB,GAES,mBAA3BoE,EAAKG,GAAGc,iBACP9D,EAAqB6D,KAAKhB,EAAKG,GAAGrG,OAClCsD,EAAoB4D,KAAKhB,EAAKG,GAAGe,WACjC7E,EAA0B2D,EAAKG,GAAGrG,MAClC+B,GAAyB,GAEC,eAA3BmE,EAAKG,GAAGc,iBACP5D,EAAiB2D,KAAKhB,EAAKG,GAAGrG,OAC9BwD,EAAgB0D,KAAKhB,EAAKG,GAAGe,WAC7B5E,EAAsB0D,EAAKG,GAAGrG,MAC9BgC,GAAqB,GAEK,SAA3BkE,EAAKG,GAAGc,iBACP1D,EAAWyD,KAAKhB,EAAKG,GAAGrG,OACxB0D,EAAUwD,KAAKhB,EAAKG,GAAGe,WACvB3E,EAAgByD,EAAKG,GAAGrG,MACxBiC,GAAe,GAEW,cAA3BiE,EAAKG,GAAGc,iBACPxD,EAAgBuD,KAAKhB,EAAKG,GAAGrG,OAC7B4D,EAAesD,KAAKhB,EAAKG,GAAGe,WAC5B1E,EAAqBwD,EAAKG,GAAGrG,MAC7BkC,GAAoB,GAEM,eAA3BgE,EAAKG,GAAGc,iBACPtD,EAAiBqD,KAAKhB,EAAKG,GAAGrG,OAC9B8D,EAAgBoD,KAAKhB,EAAKG,GAAGe,WAC7BzE,EAAsBuD,EAAKG,GAAGrG,MAC9BmC,GAAqB,IAGK,IAA3BP,IACAmB,EAAqBmE,KAAK9E,GAC1BY,EAAoBkE,KAAK,OAEJ,IAArBrF,IACAoB,EAAeiE,KAAK7E,GACpBa,EAAcgE,KAAK,OAEA,IAAnBpF,IACAqB,EAAa+D,KAAK5E,GAClBc,EAAY8D,KAAK,OAEU,IAA3BnF,IACAsB,EAAqB6D,KAAK3E,GAC1Be,EAAoB4D,KAAK,OAEF,IAAvBlF,IACAuB,EAAiB2D,KAAK1E,GACtBgB,EAAgB0D,KAAK,OAEJ,IAAjBjF,IACAwB,EAAWyD,KAAKzE,GAChBiB,EAAUwD,KAAK,OAEO,IAAtBhF,IACAyB,EAAgBuD,KAAKxE,GACrBkB,EAAesD,KAAK,OAEG,IAAvB/E,IACA0B,EAAiBqD,KAAKvE,GACtBmB,EAAgBoD,KAAK,QArMvC,wBAAAvB,EAAA0B,SAAA9B,EAAA3F,UApFsBsF,MAAAtF,KAAAuF,WAgStB,SAASmC,IAGR,IAAIC,EAAe,GACfC,EAAe,GACfzD,IACSyD,EAAe,CAACC,MAAO,kBAAmBvB,KAAMnD,EAAsB2E,gBAAiB,CAAC,WACxEC,YAAa,UAAWC,YAAa,EAAGC,MAAM,EAAOC,YAAa,EAAGC,iBAAkB,EACvFC,eAAgB,GAChCT,EAAaL,KAAKM,IAE3BxD,IACSwD,EAAe,CAACC,MAAO,OAAQvB,KAAMzC,EAAYiE,gBAAiB,CAAC,WACnDC,YAAa,UAAWC,YAAa,EAAGC,MAAM,EAAOC,YAAa,EAAGC,iBAAkB,EACvFC,eAAgB,GAC5CT,EAAaL,KAAKM,IAGnB,IAAIS,EAAU,IAAI9G,EAAM8C,EAAM,CAC7BiE,KAAM,OACNhC,KAAM,CACLiC,OAAQrF,EACRsF,SAAUb,GAEXc,QAAS,CACRC,OAAQ,CAACC,SAAS,MAAOJ,OAAO,CAACK,SAAU,KAC3CC,QAAY,SAACC,EAAKC,GACjB,IAAIC,EAAYX,EAAQY,kBAAkBH,GAAK,GAC/C,QAAiBjC,IAAdmC,EAAwB,CAC1B,GAAyE,oBAAtEA,EAAUE,OAAOR,OAAOS,YAAYH,EAAUI,eAAeC,KAA2B,CAClE,IAAIC,EAAY,MAAQpG,EAAS8F,EAAUO,QAAU,gDACrDxH,EAAiBL,gBAAgB0B,EAAqB4F,EAAUO,OAAQD,GAEjG,GAAyE,SAAtEN,EAAUE,OAAOR,OAAOS,YAAYH,EAAUI,eAAeC,KAAgB,CACvD,IAAIC,EAAY,MAAQpG,EAAS8F,EAAUO,QAAU,qCACrDxH,EAAiBL,gBAAgBoC,EAAWkF,EAAUO,OAAQD,MAIzFE,OAAQ,CACPC,eAAgB,EAChBC,WAAa,EACbC,eAAiB,EACjBC,gBAAkB,EAClBC,MAAO,CAAC,CACPC,MAAO,CACNC,aAAa,EACbC,IAAK,EACLC,IAAK,EACLC,SAAU,KAGMC,MAAO,CAAC,CACzBL,MAAO,CACNM,YAAa,EACbC,YAAa,MAKhBC,IAAK,CAEJC,SAAS,EAITC,KAAM,KAIPC,KAAM,CAEaF,SAAS,EAI3BC,KAAM,QA5WY,SAAAE,IAAA,OAAAA,EAAA5K,OAAA0F,EAAA,EAAA1F,CAAA2F,EAAAhF,EAAAiF,KAoXhB,SAAAiF,EAA2BC,GAA3B,OAAAnF,EAAAhF,EAAAqF,KAAA,SAAA+E,GAAA,cAAAA,EAAA7E,KAAA6E,EAAA5E,MAAA,cAAA4E,EAAA5E,KAAA,EACUd,EAAcyF,GADxB,OAEIlD,IAFJ,wBAAAmD,EAAApD,SAAAkD,EAAA3K,UApXgBsF,MAAAtF,KAAAuF,WAyXtBuF,QAAQC,IAAI,0CAzXU,SAAAC,GAAAN,EAAApF,MAAAtF,KAAAuF,WA0XhB0F,CAAY,6DAKP,IAAA1K,EAAAP,KACL,OACIQ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcU,GAAG,eAC5Bb,EAAAC,EAAAC,cAAA,UAAQC,UAAU,eAEduK,IAAK,SAAA7G,GAAI,OAAK9D,EAAK8D,KAAOA,KAE9B7D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACVX,KAAKI,MAAM0B,mBAlZZb,IAAMC,sCCMpBiK,mLAME,IAAIC,EAIJ,OAH6BA,EAAzBpL,KAAKJ,MAAMyL,WAAsB,oBACtB,GAGX7K,EAAAC,EAAAC,cAAC4K,EAAA,EAAD,KACI9K,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAf,UACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,KAAG6K,KAAK,qCACJ/K,EAAAC,EAAAC,cAAA,OAAK8K,IAAI,mEAAmEC,IAAI,mBAI5FjL,EAAAC,EAAAC,cAAA,SAAO4H,KAAK,WAAW3H,UAAU,kBAAkBU,GAAG,kBAElDwH,QAAS7I,KAAKJ,MAAM8L,YAAarL,QAASL,KAAKJ,MAAMyL,WACrDtK,SAAUf,KAAKJ,MAAM8L,cACzBlL,EAAAC,EAAAC,cAAA,SAAOiL,QAAQ,kBAAkBhL,UAAU,qBACvCH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BAGnBH,EAAAC,EAAAC,cAAA,OAAKW,GAAG,cAAcV,UAAWyK,GAC7B5K,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oBAEVH,EAAAC,EAAAC,cAAA,MAAImI,QAAS7I,KAAKJ,MAAM8L,aACpBlL,EAAAC,EAAAC,cAACkL,EAAA,EAAD,CAAMC,GAAE,KAAR,eAA2BrL,EAAAC,EAAAC,cAAA,+BAC/BF,EAAAC,EAAAC,cAAA,MAAImI,QAAS7I,KAAKJ,MAAM8L,aACpBlL,EAAAC,EAAAC,cAACkL,EAAA,EAAD,CAAMC,GAAE,UAAR,UACJrL,EAAAC,EAAAC,cAAA,MAAImI,QAAS7I,KAAKJ,MAAM8L,aACpBlL,EAAAC,EAAAC,cAACkL,EAAA,EAAD,CAAMC,GAAE,oBAAR,cACJrL,EAAAC,EAAAC,cAAA,MAAImI,QAAS7I,KAAKJ,MAAM8L,aACpBlL,EAAAC,EAAAC,cAACkL,EAAA,EAAD,CAAMC,GAAE,kBAAR,YACJrL,EAAAC,EAAAC,cAAA,MAAImI,QAAS7I,KAAKJ,MAAM8L,aACpBlL,EAAAC,EAAAC,cAACkL,EAAA,EAAD,CAAMC,GAAE,kBAAR,YACJrL,EAAAC,EAAAC,cAAA,MAAImI,QAAS7I,KAAKJ,MAAM8L,aACpBlL,EAAAC,EAAAC,cAACkL,EAAA,EAAD,CAAMC,GAAE,mBAAR,eAGZrL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAEXH,EAAAC,EAAAC,cAACoL,EAAA,EAAD,CAAOC,OAAO,EAAMC,KAAK,IAAIC,UAAWC,IACxC1L,EAAAC,EAAAC,cAACoL,EAAA,EAAD,CAAOE,KAAK,aAAaC,UAAW9K,IACpCX,EAAAC,EAAAC,cAACoL,EAAA,EAAD,CAAOC,OAAO,EAAMC,KAAK,OAAOC,UAAWxK,cApD9CR,IAAMC,WA4DrBgL,EAAO,SAAA9K,GAAeA,EAAZ1B,MACZ,OACIc,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcU,GAAG,eAC5Bb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAf,0BACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAACyL,EAAD,CAAQvL,WAAY,kBAAmBN,WAAY,SACnDE,EAAAC,EAAAC,cAACyL,EAAD,CAAQvL,WAAY,WAAYN,WAAY,UAC5CE,EAAAC,EAAAC,cAACyL,EAAD,CAAQvL,WAAY,SAAUN,WAAY,UAC1CE,EAAAC,EAAAC,cAACyL,EAAD,CAAQvL,WAAY,kBAAmBN,WAAY,UACnDE,EAAAC,EAAAC,cAACyL,EAAD,CAAQvL,WAAY,aAAcN,WAAY,UAC9CE,EAAAC,EAAAC,cAACyL,EAAD,CAAQvL,WAAY,OAAQN,WAAY,SACxCE,EAAAC,EAAAC,cAACyL,EAAD,CAAQvL,WAAY,YAAaN,WAAY,UAC7CE,EAAAC,EAAAC,cAACyL,EAAD,CAAQvL,WAAY,aAAcN,WAAY,WAElDE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,qBAAlB,QACAH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,qBAAlB,WAMDwK,ICjFTiB,cACF,SAAAA,EAAYxM,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAoM,IACfvM,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAsM,GAAAjM,KAAAH,KAAMJ,KAIV8L,YAAc,WACV7L,EAAKmB,SAAS,CAAEqK,YAAaxL,EAAKO,MAAMiL,cAJxCxL,EAAKO,MAAQ,CAAEiL,YAAY,GAFZxL,wEAcf,OACIW,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC2L,EAAD,CAAQX,YAAa1L,KAAK0L,YAAaL,WAAYrL,KAAKI,MAAMiL,qBAjBvDpK,IAAMC,WAgC7BoL,IAASC,OAND/L,EAAAC,EAAAC,cAAA,OAAKW,GAAG,OACJb,EAAAC,EAAAC,cAAC8L,EAAD,CAAUC,WAAY,cAAeC,iBAAkB,SAK3CC,SAASC,eAAe,SLmF1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5G,KAAK,SAAA6G,GACjCA,EAAaC","file":"static/js/main.bac6eb2c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport Switch from 'react-ios-switch';\r\n\r\nclass Toggle extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            checked: true,\r\n        };\r\n        if (this.props.initToggle === \"true\") {\r\n            this.state = {\r\n                checked: true,\r\n            };\r\n            // console.dir(this.props.toggleName + \" \" + this.props.initToggle + \" \" + setState);\r\n          } else {\r\n            this.state = {\r\n                checked: false,\r\n            };\r\n            //console.dir(this.props.toggleName + \" \" + this.props.initToggle + \" \" + setState);\r\n          } \r\n    }\r\n\r\n    render() {\r\n        const { checked } = this.state;\r\n        //console.dir(this.props.toggleName + \" \" + this.props.initToggle + \" \" + this.state.checked);\r\n\r\n        return (\r\n            <div className=\"trackItem\">\r\n                <div className=\"trackName\">{this.props.toggleName}</div>\r\n                <Switch\r\n                    checked={checked}\r\n                    onColor=\"#22aee4\"\r\n                    className=\"switch\"\r\n                    onChange={checked => this.setState({ checked })}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Toggle;","import React from 'react';\r\n\r\nconst Page = ({ match }) => {\r\n\r\n    return (\r\n        <div className=\"pageContent\" id=\"pageContent\">\r\n            <div className=\"pageTopText\">\r\n            Page ID {match.params.id}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Page","import React from 'react';\r\n/*To enable Pan and Zoom that are defined in chartjs-plugin-zoom*/\r\nimport * as zoom from 'chartjs-plugin-zoom';\r\n// import { finished } from 'stream';\r\n\r\nvar Chart = require(\"chart.js\");\r\n\r\nclass Graph extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {extraText:''};\r\n    }\r\n    \r\n    //this will redraw the page WITH the added text at the bottom\r\n    renderExtraText = (array, index, adedText) =>{\r\n        this.setState({ extraText: adedText + array[index]});\r\n    }\r\n    \r\n    componentDidMount() {\r\n        let currentComponent = this;\r\n\t\t//This is where we define local variables that will be familiar to all functions\r\n\t\t//inside the componentDidMount functions\r\n\t\t//We start by defining 'listners' that will later tell us if a certain dataset was marked or not\t\r\n        let GeneralFeelingIsMarked = false;\r\n        let AppetiteIsMarked = false;\r\n        let NauseaIsMarked = false;\r\n        let BowelMovementsIsMarked = false;\r\n        let MotivationIsMarked = false;\t\t\t\r\n        let PainIsMarked = false;\t\r\n        let DizzinessIsMarked = false;\r\n        let ExhaustionIsMarked = false;\t\t\t\t\r\n\t\t\t\t\t\t\r\n        let GeneralFeelingLastValue = 0;\r\n        let AppetiteLastValue = 0;\r\n        let NauseaLastValue = 0;\r\n        let BowelMovementsLastValue = 0;\r\n        let MotivationLastValue = 0;\t\t\t\r\n        let PainLastValue = 0; \r\n        let DizzinessLastValue = 0;\r\n        let ExhaustionLastValue = 0;\t\r\n\t\t//let conditionsLastValue = 0;\r\n\t\t//let treatmentsLastValue = 0;\r\n\t\t\t\r\n        let currDateCombo = \"\";\r\n        let currDate = \"\";\r\n\t\t\t\r\n        //this will be the list of labels for the X Axis of the graph\r\n        let myLabels = [];\r\n\r\n\t\t//these are the various data sets. \r\n\t\t//Each set has the data on it's state and the text written at that time.\r\n\t\tlet myDataGeneralFeeling = [];\r\n\t\tlet GeneralFeelingTexts = [];\r\n        let myDataAppetite = [];\r\n\t\tlet AppetiteTexts = [];\r\n\t\tlet myDataNausea = [];\r\n        let NauseaTexts = [];\r\n\t\tlet myDataBowelMovements = [];\r\n        let BowelMovementsTexts = [];\r\n\t\tlet myDataMotivation = [];\r\n        let MotivationTexts = [];\r\n\t\tlet myDataPain = [];\t\t\r\n        let PainTexts = [];\r\n\t\tlet myDataDizziness\t= [];\t\r\n        let DizzinessTexts = [];\r\n\t\tlet myDataExhaustion = [];\r\n        let ExhaustionTexts = [];\r\n\r\n        //let conditionsTexts = [];\r\n\t\t//let treatmentsTexts = [];\t\r\n\t\t\r\n\t\tlet GeneralFeelingToggle = true;\r\n        let AppetiteToggle = false;\r\n        let NauseaToggle = false;\r\n        let BowelMovementsToggle = false;\r\n        let MotivationToggle = false;\t\t\t\r\n        let PainToggle = true;\t\r\n        let DizzinessToggle = false;\r\n        let ExhaustionToggle = false;\t\t\t\t\r\n\r\n        const node = this.node;\r\n\t\t\r\n\t\t//Here are a bunch of Functions that I'll be using:\r\n        //function to convert string in the format of yyyy-mm-dd into a valid date object\r\n        function toDate(dateStr) {\r\n            return new Date(dateStr)\r\n        }\r\n        //function to get the number of days differentiating two dates given as strings of format dd/mm/yyyy\r\n        function daysdifference(date1, date2) {\r\n            // The number of milliseconds in one day\r\n            var ONEDAY = 1000 * 60 * 60 * 24;\r\n            // Convert both dates to milliseconds\r\n            var date1_ms = toDate(date1).getTime();\r\n            var date2_ms = toDate(date2).getTime();\r\n            // Calculate the difference in milliseconds\r\n            var difference_ms = Math.abs(date1_ms - date2_ms);\r\n\r\n            // Convert back to days and return\r\n            return Math.round(difference_ms/ONEDAY);\r\n        }\r\n\r\n\t\t//function to fetch the information about the user from the DB\r\n\t\tasync function fetchUserData(userId){\r\n            //let URL = \"http://localhost:4000/fetch/\" + userId;\r\n\t\t\tlet URL = \"fetch/\" + userId;\r\n            await fetch(URL).then(response => {\r\n            return response.json();\r\n\t\t\t}).then(data => {\r\n\t\t\t\t//This is where we start to break down the data we got about the user from the DB \r\n\t\t\t\t//into seperate data sets (like 'pain', 'general feeling' etc')\r\n\r\n\t\t\t\t//This loop goes over every document in the DB that belongs to this user \r\n\t\t\t\t//and seperates each document to it's proper data set\r\n\t\t\t\tlet lng = data.length;\r\n\t\t\t\t//this makes sure we have some value here even if we didn't get back any record from the DB\r\n\t\t\t\t//if(lng === undefined) {lng = 0}; \r\n                for (var i = 0; i < lng; i++) {\r\n\t\t\t\t\tlet dateTimeCombo = toDate(data[i].date).toLocaleString(undefined, {\r\n\t\t\t\t\t\tday: 'numeric',\r\n\t\t\t\t\t\tmonth: 'short',\r\n\t\t\t\t\t\tyear: '2-digit',\r\n\t\t\t\t\t}) + \".\" + data[i].check;\r\n\t\t\t\t\tif (myLabels.includes(dateTimeCombo) === false) {\r\n\t\t\t\t\t\twhile(daysdifference(data[i].date , currDate) > 1){\r\n\t\t\t\t\t\t\tlet tempDate = new Date(toDate(currDate));\r\n\t\t\t\t\t\t\ttempDate.setDate(tempDate.getDate() + 1);\r\n\t\t\t\t\t\t\t//this currDate works with a date string of yyyy-mm-dd\r\n\t\t\t\t\t\t\tcurrDate =  tempDate.toLocaleString(undefined, {\r\n\t\t\t\t\t\t\t\tday: 'numeric',\r\n\t\t\t\t\t\t\t\tmonth: 'short',\r\n\t\t\t\t\t\t\t\tyear: '2-digit',\r\n\t\t\t\t\t\t\t});   \r\n\t\t\t\t\t\t\tmyLabels.push(currDate);\r\n\t\t\t\t\t\t\tif (GeneralFeelingIsMarked === false) {\r\n\t\t\t\t\t\t\t\tmyDataGeneralFeeling.push(GeneralFeelingLastValue);\r\n\t\t\t\t\t\t\t\tGeneralFeelingTexts.push(\" \");\r\n\t\t\t\t\t\t\t}\r\n\t                        if (AppetiteIsMarked === false) {\r\n    \t                        myDataAppetite.push(AppetiteLastValue);\r\n        \t                    AppetiteTexts.push(\" \");\r\n            \t            }\r\n                \t        if (NauseaIsMarked === false) {\r\n                    \t        myDataNausea.push(NauseaLastValue);\r\n                        \t    NauseaTexts.push(\" \");\r\n\t                        }\t\r\n    \t                    if (BowelMovementsIsMarked === false) {\r\n       \t\t                    myDataBowelMovements.push(BowelMovementsLastValue);\r\n       \t                     \tBowelMovementsTexts.push(\" \");\r\n       \t                 \t}\t\r\n                        \tif (MotivationIsMarked === false) {\r\n                            \tmyDataMotivation.push(MotivationLastValue);\r\n                            \tMotivationTexts.push(\" \");\r\n                        \t}\t\t\t\t\t\t\r\n                        \tif (PainIsMarked === false) {\r\n                            \tmyDataPain.push(PainLastValue);\r\n                            \tPainTexts.push(\" \");\r\n                        \t}\r\n                        \tif (DizzinessIsMarked === false) {\r\n                            \tmyDataDizziness.push(DizzinessLastValue);\r\n                            \tDizzinessTexts.push(\" \");\r\n                        \t}\r\n                        \tif (ExhaustionIsMarked === false) {\r\n                            \tmyDataExhaustion.push(ExhaustionLastValue);\r\n                            \tExhaustionTexts.push(\" \");\r\n                        \t}\t\t\t\t\t\t\r\n                        \tGeneralFeelingIsMarked = false;\r\n                \t        AppetiteIsMarked = false;\r\n                    \t    NauseaIsMarked = false;\r\n                        \tBowelMovementsIsMarked = false;\r\n          \t              \tMotivationIsMarked = false;\t\t\t\r\n                        \tPainIsMarked = false;\t\r\n                        \tDizzinessIsMarked = false;\r\n                        \tExhaustionIsMarked = false;\t\t\t\t\r\n                    \t}\r\n                    \tmyLabels.push(dateTimeCombo);\r\n                    \tif(currDateCombo !== dateTimeCombo && currDateCombo !== \"\"){\r\n                        \tif (GeneralFeelingIsMarked === false) {\r\n                            \tmyDataGeneralFeeling.push(GeneralFeelingLastValue);\r\n                            \tGeneralFeelingTexts.push(\" \");\r\n                        \t}\r\n\t                        if (AppetiteIsMarked === false) {\r\n    \t                        myDataAppetite.push(AppetiteLastValue);\r\n        \t                    AppetiteTexts.push(\" \");\r\n            \t            }\r\n                \t        if (NauseaIsMarked === false) {\r\n                    \t        myDataNausea.push(NauseaLastValue);\r\n                        \t    NauseaTexts.push(\" \");\r\n\t                        }\t\r\n    \t                    if (BowelMovementsIsMarked === false) {\r\n        \t                    myDataBowelMovements.push(BowelMovementsLastValue);\r\n            \t                BowelMovementsTexts.push(\" \");\r\n                \t        }\t\r\n                    \t    if (MotivationIsMarked === false) {\r\n                        \t    myDataMotivation.push(MotivationLastValue);\r\n                            \tMotivationTexts.push(\" \");\r\n                        \t}\t\t\t\t\t\t\r\n\t                        if (PainIsMarked === false) {\r\n    \t                        myDataPain.push(PainLastValue);\r\n        \t                    PainTexts.push(\" \");\r\n            \t            }\r\n                \t        if (DizzinessIsMarked === false) {\r\n                    \t        myDataDizziness.push(DizzinessLastValue);\r\n                        \t    DizzinessTexts.push(\" \");\r\n                        \t}\t\r\n                        \tif (ExhaustionIsMarked === false) {\r\n                           \t \tmyDataExhaustion.push(ExhaustionLastValue);\r\n                            \tExhaustionTexts.push(\" \");\r\n                        \t}\r\n                    \t}\r\n                    \tcurrDate = data[i].date;\r\n                    \tcurrDateCombo = dateTimeCombo;\r\n                    \tGeneralFeelingIsMarked = false;\r\n                    \tAppetiteIsMarked = false;\r\n                    \tNauseaIsMarked = false;\r\n                    \tBowelMovementsIsMarked = false;\r\n                    \tMotivationIsMarked = false;\t\t\t\r\n                    \tPainIsMarked = false;\t\r\n                    \tDizzinessIsMarked = false;\r\n                    \tExhaustionIsMarked = false;\t\t\t\t\r\n                \t}\r\n                \tif(data[i].RecordTracking === 'GeneralFeeling'){\r\n                    \tmyDataGeneralFeeling.push(data[i].state);\r\n                    \tGeneralFeelingTexts.push(data[i].ExtraText);\r\n                    \tGeneralFeelingLastValue = data[i].state;\r\n                    \tGeneralFeelingIsMarked = true;\r\n                \t} \r\n                \tif(data[i].RecordTracking === 'Appetite'){\r\n                    \tmyDataAppetite.push(data[i].state);\r\n                    \tAppetiteTexts.push(data[i].ExtraText);\r\n                    \tAppetiteLastValue = data[i].state;\r\n                    \tAppetiteIsMarked = true;\r\n                \t} \t\r\n                \tif(data[i].RecordTracking === 'Nausea'){\r\n                    \tmyDataNausea.push(data[i].state);\r\n                    \tNauseaTexts.push(data[i].ExtraText);\r\n                    \tNauseaLastValue = data[i].state;\r\n                    \tNauseaIsMarked = true;\r\n                \t} \t\t\r\n                \tif(data[i].RecordTracking === 'BowelMovements'){\r\n                    \tmyDataBowelMovements.push(data[i].state);\r\n                    \tBowelMovementsTexts.push(data[i].ExtraText);\r\n                    \tBowelMovementsLastValue = data[i].state;\r\n                    \tBowelMovementsIsMarked = true;\r\n                \t} \t\r\n                \tif(data[i].RecordTracking === 'Motivation'){\r\n                    \tmyDataMotivation.push(data[i].state);\r\n                    \tMotivationTexts.push(data[i].ExtraText);\r\n                    \tMotivationLastValue = data[i].state;\r\n                    \tMotivationIsMarked = true;\r\n                \t} \t\t\t\t\r\n                \tif(data[i].RecordTracking === 'Pain'){\r\n                    \tmyDataPain.push(data[i].state);\r\n                    \tPainTexts.push(data[i].ExtraText);\r\n                    \tPainLastValue = data[i].state;\r\n                    \tPainIsMarked = true;\r\n                \t}    \r\n                \tif(data[i].RecordTracking === 'Dizziness'){\r\n                    \tmyDataDizziness.push(data[i].state);\r\n                    \tDizzinessTexts.push(data[i].ExtraText);\r\n                    \tDizzinessLastValue = data[i].state;\r\n                    \tDizzinessIsMarked = true;\r\n                \t} \r\n                \tif(data[i].RecordTracking === 'Exhaustion'){\r\n                    \tmyDataExhaustion.push(data[i].state);\r\n                    \tExhaustionTexts.push(data[i].ExtraText);\r\n                    \tExhaustionLastValue = data[i].state;\r\n                    \tExhaustionIsMarked = true;\r\n                \t} \t\t\t\t\r\n                }\r\n                if (GeneralFeelingIsMarked === false) {\r\n                    myDataGeneralFeeling.push(GeneralFeelingLastValue);\r\n                    GeneralFeelingTexts.push(\" \");\r\n                }\r\n                if (AppetiteIsMarked === false) {\r\n                    myDataAppetite.push(AppetiteLastValue);\r\n                    AppetiteTexts.push(\" \");\r\n                }\r\n                if (NauseaIsMarked === false) {\r\n                    myDataNausea.push(NauseaLastValue);\r\n                    NauseaTexts.push(\" \");\r\n                }\t\r\n                if (BowelMovementsIsMarked === false) {\r\n                    myDataBowelMovements.push(BowelMovementsLastValue);\r\n                    BowelMovementsTexts.push(\" \");\r\n                }\t\r\n                if (MotivationIsMarked === false) {\r\n                    myDataMotivation.push(MotivationLastValue);\r\n                    MotivationTexts.push(\" \");\r\n                }\t\t\t\t\t\t\r\n                if (PainIsMarked === false) {\r\n                    myDataPain.push(PainLastValue);\r\n                    PainTexts.push(\" \");\r\n                }\r\n                if (DizzinessIsMarked === false) {\r\n                    myDataDizziness.push(DizzinessLastValue);\r\n                    DizzinessTexts.push(\" \");\r\n                }\r\n                if (ExhaustionIsMarked === false) {\r\n                    myDataExhaustion.push(ExhaustionLastValue);\r\n                    ExhaustionTexts.push(\" \");\r\n                }\r\n            })\r\n\t\t}\r\n        \r\n\t\t//This function uses the variables defined in function fetchUserData \r\n\t\t//to fill out the data sets in the Graph component\r\n\t\tfunction fillChartData(){\r\n\t\t\t//Here is where we fill in the datasets based on what the user has\r\n\t\t\t//currently defined\r\n\t\t\tlet datasetsData = [];\r\n\t\t\tlet datasetsText = \"\";\r\n\t\t\tif (GeneralFeelingToggle){\r\n                datasetsText = {label: 'General Feeling', data: myDataGeneralFeeling, backgroundColor: ['#3e95cd'], \r\n                                borderColor: '#3e95cd', borderWidth: 7, fill: false, pointRadius: 7, pointHoverRadius: 7,\r\n                                pointHitRadius: 7}; \r\n                datasetsData.push(datasetsText);\r\n            }\r\n\t\t\tif (PainToggle){\r\n                datasetsText = {label: 'Pain', data: myDataPain, backgroundColor: ['#c45850'], \r\n                                borderColor: '#c45850', borderWidth: 7, fill: false, pointRadius: 7, pointHoverRadius: 7,\r\n                                pointHitRadius: 7}; \r\n\t\t\t\tdatasetsData.push(datasetsText);\r\n\t\t\t}\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\tlet myChart = new Chart(node, {\r\n\t\t\t\ttype: \"line\",\r\n\t\t\t\tdata: {\r\n\t\t\t\t\tlabels: myLabels,\r\n\t\t\t\t\tdatasets: datasetsData\r\n\t\t\t\t\t},\r\n\t\t\t\toptions: {\r\n\t\t\t\t\tlegend: {position:\"top\", labels:{boxWidth: 10}},\r\n\t\t\t\t\t'onClick' : (evt, item) => { \r\n\t\t\t\t\t\tvar thisPoint = myChart.getElementAtEvent(evt)[0];\r\n\t\t\t\t\t\tif(thisPoint !== undefined){\r\n\t\t\t\t\t\t\tif(thisPoint._chart.legend.legendItems[thisPoint._datasetIndex].text === \"General Feeling\"){\r\n                                let addedText = \"On \" + myLabels[thisPoint._index] + \", concerning your General Feeling you wrote: \";\r\n                                currentComponent.renderExtraText(GeneralFeelingTexts, thisPoint._index, addedText);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(thisPoint._chart.legend.legendItems[thisPoint._datasetIndex].text === \"Pain\"){\r\n                                let addedText = \"On \" + myLabels[thisPoint._index] + \", concerning your Pain you wrote: \";\r\n                                currentComponent.renderExtraText(PainTexts, thisPoint._index, addedText);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} \r\n\t\t\t\t\t},\r\n\t\t\t\t\tscales: {\r\n\t\t\t\t\t\tscaleOverride : true,\r\n\t\t\t\t\t\tscaleSteps : 1,\r\n\t\t\t\t\t\tscaleStepWidth : 1,\r\n\t\t\t\t\t\tscaleStartValue : 0,\r\n\t\t\t\t\t\tyAxes: [{\r\n\t\t\t\t\t\t\tticks: {\r\n\t\t\t\t\t\t\t\tbeginAtZero: true,\r\n\t\t\t\t\t\t\t\tmax: 5,\r\n\t\t\t\t\t\t\t\tmin: 1,\r\n\t\t\t\t\t\t\t\tstepSize: 1 \r\n\t\t\t\t\t\t\t}\r\n                        }],\r\n                        xAxes: [{\r\n\t\t\t\t\t\t\tticks: {\r\n\t\t\t\t\t\t\t\tminRotation: 0,\r\n\t\t\t\t\t\t\t\tmaxRotation: 0 \r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}]\r\n\t\t\t\t\t},\r\n\t\t\t\t\t// Container for pan options\r\n\t\t\t\t\tpan: {\r\n\t\t\t\t\t\t// Boolean to enable panning\r\n\t\t\t\t\t\tenabled: true,\r\n\r\n\t\t\t\t\t\t// Panning directions. Remove the appropriate direction to disable \r\n\t\t\t\t\t\t// Eg. 'y' would only allow panning in the y direction\r\n\t\t\t\t\t\tmode: 'x'\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t// Container for zoom options\r\n\t\t\t\t\tzoom: {\r\n\t\t\t\t\t\t// Boolean to enable zooming\r\n                        enabled: true,\r\n                        \r\n\t\t\t\t\t\t// Zooming directions. Remove the appropriate direction to disable \r\n\t\t\t\t\t\t// Eg. 'y' would only allow zooming in the y direction\r\n\t\t\t\t\t\tmode: 'x',\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\t\r\n\r\n\t\t//This is where it all comes together.\r\n        //We run the functions one after the other in order:\r\n        async function commitGraph(UserId){\r\n            await fetchUserData(UserId);\r\n            fillChartData();\r\n        }\r\n\r\n\t\tconsole.log(\"call data for 5c6459230611ee0d144ac78b\");\r\n        commitGraph(\"5c6459230611ee0d144ac78b\");\r\n        \r\n        //Now that the Chart is full of Data we can move on to the rendering\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"pageContent\" id=\"pageContent\">\r\n                <canvas className=\"graphContent\"\r\n                    // style={{ width: 300, height: 300 }}\r\n                    ref={node => (this.node = node)}\r\n                />\r\n                <div className=\"extraText\">\r\n                    {this.state.extraText}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Graph;","import React from 'react';\r\n// import ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\n/*Toggle is the Toggle select element */\r\nimport Toggle from './toggle';\r\n/*Page is where I define the different pages */\r\nimport Page from './Page';\r\n/*Graph is where I define the graph class */\r\nimport Graph from './graph';\r\n/*BrowserRouter and so on are elements of react-router-dom to enable Routing  */\r\nimport { BrowserRouter as Router, Link, Route } from 'react-router-dom';\r\n\r\nclass Navbar extends React.Component {\r\n    // constructor(props) {\r\n    //     super(props);\r\n    // }\r\n\r\n    render() {\r\n        let cName;\r\n        if (this.props.isToggleOn) { cName = \"sidebarMenuShadow\" }\r\n        else { cName = \"\" }\r\n\r\n        return (\r\n            <Router>\r\n                <div>\r\n                    <div className=\"header\">\r\n                        <div className=\"headerText\">IFEELU</div>\r\n                        <div className=\"logo\">\r\n                            <a href=\"https://ifeelu-6133.nodechef.com/\">\r\n                                <img src=\"https://drive.google.com/uc?id=14MW9Z9pz9of-krcV5qLRLs_gvjmE1Sny\" alt=\"IFeelU Logo\" />\r\n                            </a>\r\n                        </div>\r\n                    </div>\r\n                    <input type=\"checkbox\" className=\"openSidebarMenu\" id=\"openSidebarMenu\"\r\n                        /*setState changes the state and re-renders the page on changes */\r\n                        onClick={this.props.toggleState} checked={this.props.isToggleOn}\r\n                        onChange={this.props.toggleState}/>\r\n                    <label htmlFor=\"openSidebarMenu\" className=\"sidebarIconToggle\">\r\n                        <div className=\"spinner diagonal part-1\"></div>\r\n                        <div className=\"spinner horizontal\"></div>\r\n                        <div className=\"spinner diagonal part-2\"></div>\r\n                    </label>\r\n                    {/* {console.log(this.state.isToggleOn + \" \" + cName)} */}\r\n                    <div id=\"sidebarMenu\" className={cName}>\r\n                        <ul className=\"sidebarMenuInner\">\r\n                            {/*<Link> changes the URL*/}\r\n                            <li onClick={this.props.toggleState}>\r\n                                <Link to={`/`}>Barak Brudo <span>Web Developer</span></Link></li>\r\n                            <li onClick={this.props.toggleState}>\r\n                                <Link to={`/graph`}>Graph</Link></li>\r\n                            <li onClick={this.props.toggleState}>\r\n                                <Link to={`/pages/Instagram`}>Instagram</Link></li>\r\n                            <li onClick={this.props.toggleState}>\r\n                                <Link to={`/pages/Twitter`}>Twitter</Link></li>\r\n                            <li onClick={this.props.toggleState}>\r\n                                <Link to={`/pages/YouTube`}>YouTube</Link></li>\r\n                            <li onClick={this.props.toggleState}>\r\n                                <Link to={`/pages/Linkedin`}>Linkedin</Link></li>\r\n                        </ul>\r\n                    </div>\r\n                    <div className='wrapper'>\r\n                        {/*<Route> changes the content of this div (wrapper) based onb the URL*/}\r\n                        <Route exact={true} path='/' component={Home} />\r\n                        <Route path='/pages/:id' component={Page} />\r\n                        <Route exact={true} path='/:id' component={Graph} />\r\n                    </div>\r\n                </div>\r\n            </Router>\r\n        );\r\n    }\r\n}\r\n\r\nconst Home = ({ match }) => {\r\n    return (\r\n        <div className=\"pageContent\" id=\"pageContent\">\r\n            <div className=\"pageTopText\">I would like to track:</div>\r\n            <div className=\"trackBox\">\r\n                <Toggle toggleName={\"General Feeling\"} initToggle={\"true\"} />\r\n                <Toggle toggleName={\"Appetite\"} initToggle={\"false\"} />\r\n                <Toggle toggleName={\"Nausea\"} initToggle={\"false\"} />\r\n                <Toggle toggleName={\"Bowel Movements\"} initToggle={\"false\"} />\r\n                <Toggle toggleName={\"Motivation\"} initToggle={\"false\"} />\r\n                <Toggle toggleName={\"Pain\"} initToggle={\"true\"} />\r\n                <Toggle toggleName={\"Dizziness\"} initToggle={\"false\"} />\r\n                <Toggle toggleName={\"Exhaustion\"} initToggle={\"false\"} />\r\n            </div>\r\n            <div className=\"buttonArea\">\r\n                <button className=\"button buttonBack\">Back</button>\r\n                <button className=\"button buttonNext\">Next</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Navbar;","//This is the main page f the app\n//Start this app by typing: 'npm start' in a terminal \nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n/*Navbar is the navbar for all pages */\nimport Navbar from './navbar';\n\n/*PageWrap is the class encomassing all the pages wrapped in <Router>. \nThe Nav bar is always ther and under it are the various pages represented by\n<Route.. */\nclass PageWrap extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { isToggleOn: false };\n    }\n\n    toggleState = () => {\n        this.setState({ isToggleOn: !this.state.isToggleOn });\n    }\n\n    render() {\n        // let cName;\n        // if (this.state.isToggleOn) { cName = \"sidebarMenuShadow\" }\n        // else { cName = \"\" }\n\n        return (\n            <div>\n                <Navbar toggleState={this.toggleState} isToggleOn={this.state.isToggleOn}/>\n            </div>\n        );\n    }\n}\n\n\nfunction main() {\n    return (\n        <div id=\"App\">\n            <PageWrap pageWrapId={\"pageContent\"} outerContainerId={\"App\"} />\n        </div>\n    );\n}\n\nReactDOM.render(main(), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}