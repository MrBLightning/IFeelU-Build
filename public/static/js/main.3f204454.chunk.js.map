{"version":3,"sources":["serviceWorker.js","toggle.js","Page.js","graph.js","navbar.js","index.js"],"names":["Boolean","window","location","hostname","match","Toggle","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","checked","initToggle","_this2","react_default","a","createElement","className","toggleName","lib_default","onColor","onChange","setState","React","Component","Page","_ref","id","params","Chart","require","Graph","renderExtraText","array","index","adedText","extraText","myLabels","myDataPain","myDataGeneralFeeling","GeneralFeelingTexts","PainTexts","toDate","daysdifference","date1","date2","date1_ms","getTime","date2_ms","difference_ms","Math","abs","round","dateStr","Date","node","fetch","then","response","console","dir","json","data","GeneralFeelingIsMarked","PainIsMarked","GeneralFeelingLastValue","PainLastValue","currDateCombo","currDate","i","length","dateTimeCombo","date","toLocaleString","undefined","day","month","year","check","includes","tempDate","setDate","getDate","push","RecordTracking","ExtraText","log","myChart","type","labels","datasets","label","backgroundColor","borderColor","borderWidth","fill","pointRadius","pointHoverRadius","pointHitRadius","options","legend","position","boxWidth","onClick","evt","item","thisPoint","getElementAtEvent","_chart","legendItems","_datasetIndex","text","addedText","_index","scales","scaleOverride","scaleSteps","scaleStepWidth","scaleStartValue","yAxes","ticks","beginAtZero","max","min","stepSize","xAxes","minRotation","maxRotation","pan","enabled","mode","zoom","_this3","ref","Navbar","cName","isToggleOn","BrowserRouter","href","src","alt","toggleState","htmlFor","Link","to","Route","exact","path","component","Home","toggle","PageWrap","navbar","ReactDOM","render","src_PageWrap","pageWrapId","outerContainerId","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3f204454.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport Switch from 'react-ios-switch';\n\nclass Toggle extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            checked: true,\n        };\n        if (this.props.initToggle === \"true\") {\n            this.state = {\n                checked: true,\n            };\n            // console.dir(this.props.toggleName + \" \" + this.props.initToggle + \" \" + setState);\n          } else {\n            this.state = {\n                checked: false,\n            };\n            //console.dir(this.props.toggleName + \" \" + this.props.initToggle + \" \" + setState);\n          } \n    }\n\n    render() {\n        const { checked } = this.state;\n        //console.dir(this.props.toggleName + \" \" + this.props.initToggle + \" \" + this.state.checked);\n\n        return (\n            <div className=\"trackItem\">\n                <div className=\"trackName\">{this.props.toggleName}</div>\n                <Switch\n                    checked={checked}\n                    onColor=\"#22aee4\"\n                    className=\"switch\"\n                    onChange={checked => this.setState({ checked })}\n                />\n            </div>\n        );\n    }\n}\n\nexport default Toggle;","import React from 'react';\n\nconst Page = ({ match }) => {\n\n    return (\n        <div className=\"pageContent\" id=\"pageContent\">\n            <div className=\"pageTopText\">\n            Page ID {match.params.id}\n            </div>\n        </div>\n    )\n}\n\nexport default Page","import React from 'react';\n/*To enable Pan and Zoom that are defined in chartjs-plugin-zoom*/\nimport * as zoom from 'chartjs-plugin-zoom';\n// import { finished } from 'stream';\n\nvar Chart = require(\"chart.js\");\n\nclass Graph extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {myLabels:[], myDataPain:[], myDataGeneralFeeling:[], GeneralFeelingTexts:[], PainTexts:[], extraText:''};\n    }\n    \n    renderExtraText = (array, index, adedText) => {\n        this.setState({ extraText: adedText + array[index]});\n    }\n\n    async componentDidMount() {\n        //function to convert string in the format of yyyy-mm-dd into a valid date object\n        function toDate(dateStr) {\n            return new Date(dateStr)\n        }\n        //function to get the number of days differentiating two dates given as strings of format dd/mm/yyyy\n        function daysdifference(date1, date2) {\n            // The number of milliseconds in one day\n            var ONEDAY = 1000 * 60 * 60 * 24;\n            // Convert both dates to milliseconds\n            var date1_ms = toDate(date1).getTime();\n            var date2_ms = toDate(date2).getTime();\n            // Calculate the difference in milliseconds\n            var difference_ms = Math.abs(date1_ms - date2_ms);\n\n            // Convert back to days and return\n            return Math.round(difference_ms/ONEDAY);\n        }\n        const node = this.node;\n        //await fetch('http://localhost:4000/fetch/5c6459230611ee0d144ac78b').then(response => {\n        await fetch('fetch/5c6459230611ee0d144ac78b').then(response => {\n            console.dir(response)\n            return response.json();\n        }).then(data => {\n            //console.log(data);\n            let GeneralFeelingIsMarked = false;\n            let PainIsMarked = false;\n            let GeneralFeelingLastValue = 0;\n            let PainLastValue = 0; \n            let currDateCombo = \"\";\n            let currDate = \"\";\n            for (var i = 0; i < data.length; i++) {\n                //console.dir(data[i]);\n                let dateTimeCombo = toDate(data[i].date).toLocaleString(undefined, {\n                    day: 'numeric',\n                    month: 'short',\n                    year: '2-digit',\n                }) + \".\" + data[i].check;\n                if (this.state.myLabels.includes(dateTimeCombo) === false) {\n                    while(daysdifference(data[i].date , currDate) > 1){\n                        //console.log(\"D1: \" + data[i].date + \" D2: \" + currDate + \" \" + daysdifference(data[i].date , currDate));\n                        let tempDate = new Date(toDate(currDate));\n                        tempDate.setDate(tempDate.getDate() + 1);\n                        //this currDate worked with the old date string of dd/mm/yyyy\n                        //currDate =  (\"0\" + (tempDate.getDate())).slice(-2) + \"/\" + (\"0\" + (tempDate.getMonth() + 1)).slice(-2) + \"/\" + tempDate.getFullYear();  \n                        //this currDate works with the new date string of yyyy-mm-dd\n                        currDate =  tempDate.toLocaleString(undefined, {\n                            day: 'numeric',\n                            month: 'short',\n                            year: '2-digit',\n                        });   \n                        this.state.myLabels.push(currDate);\n                        if (GeneralFeelingIsMarked === false) {\n                            this.state.myDataGeneralFeeling.push(GeneralFeelingLastValue);\n                            this.state.GeneralFeelingTexts.push(\" \");\n                        }\n                        if (PainIsMarked === false) {\n                            this.state.myDataPain.push(PainLastValue);\n                            this.state.PainTexts.push(\" \");\n                        }\n                        GeneralFeelingIsMarked = false;\n                        PainIsMarked = false;\n                    }\n                    this.state.myLabels.push(dateTimeCombo);\n                    if(currDateCombo !== dateTimeCombo && currDateCombo !== \"\"){\n                        if (GeneralFeelingIsMarked === false) {\n                            this.state.myDataGeneralFeeling.push(GeneralFeelingLastValue);\n                            this.state.GeneralFeelingTexts.push(\" \");\n                        }\n                        if (PainIsMarked === false) {\n                            this.state.myDataPain.push(PainLastValue);\n                            this.state.PainTexts.push(\" \");\n                        }\n                    }\n                    currDate = data[i].date;\n                    currDateCombo = dateTimeCombo;\n                    GeneralFeelingIsMarked = false;\n                    PainIsMarked = false;\n                }\n                if(data[i].RecordTracking === 'GeneralFeeling'){\n                    this.state.myDataGeneralFeeling.push(data[i].state);\n                    this.state.GeneralFeelingTexts.push(data[i].ExtraText);\n                    GeneralFeelingLastValue = data[i].state;\n                    GeneralFeelingIsMarked = true;\n                } \n                if(data[i].RecordTracking === 'Pain'){\n                    this.state.myDataPain.push(data[i].state);\n                    this.state.PainTexts.push(data[i].ExtraText);\n                    PainLastValue = data[i].state;\n                    PainIsMarked = true;\n                }             \n            }\n            if (GeneralFeelingIsMarked === false) {\n                this.state.myDataGeneralFeeling.push(GeneralFeelingLastValue);\n                this.state.GeneralFeelingTexts.push(\" \");\n            }\n            if (PainIsMarked === false) {\n                this.state.myDataPain.push(PainLastValue);\n                this.state.PainTexts.push(\" \");\n            }\n            //console.log(this.state.myLabels);\n            //console.log(this.state.myDataPain);\n            //console.log(this.state.myDataGeneralFeeling);\n            //console.log(this.state.GeneralFeelingTexts);\n            //console.log(this.state.PainTexts);\n            //this.setState(data)\n        })\n\n        console.log(this.state.myLabels.length);\n\n        let myChart = new Chart(node, {\n            type: \"line\",\n            data: {\n                labels: this.state.myLabels,\n                // [\"1/1/19 10:00\", \"2/1/19 19:00\", \"3/1/19\", \"4/1/19\", \"5/1/19\", \"6/1/19\",\n                //          \"7/1/19\",\"8/1/19\", \"9/1/19\", \"10/1/19\", \"11/1/19\", \"12/1/19\", \n                //          \"13/1/19\", \"14/1/19\"],\n                datasets: [\n                    {\n                        label: \"Pain\",\n                        data: this.state.myDataPain,\n                        //[5, 5, 4, 3, 1, 2, 3, 4, 3, 1, 2, 3, 4, 3],\n                        backgroundColor: [\n                            \"#c45850\"\n                        ],\n                        borderColor: \"#c45850\",\n                        borderWidth: 7,\n                        fill: false,\n                        pointRadius: 7,\n                        pointHoverRadius: 7,\n                        pointHitRadius: 7\n                    },\n                    {\n                        label: \"General Feeling\",\n                        data: this.state.myDataGeneralFeeling,\n                        //[4, 4, 3, 3, 3, 2, 1, 5, 4, 3, 1, 2, 3, 4],\n                        backgroundColor: [\n                            \"#3e95cd\"\n                        ],\n                        borderColor: \"#3e95cd\",\n                        borderWidth: 7,\n                        fill: false,\n                        pointRadius: 7,\n                        pointHoverRadius: 7,\n                        pointHitRadius: 7\n                    },\n                    {\n                        label: \"Test1\",\n                        data: [5, 5, 4, 3, 1, 2, 3, 4, 3, 1, 2, 3, 4, 3, 3, 1, 2, 3, 4, 3],\n                        backgroundColor: [\n                            \"#7f22e8\"\n                        ],\n                        borderColor: \"#7f22e8\",\n                        borderWidth: 7,\n                        fill: false,\n                        pointRadius: 7,\n                        pointHoverRadius: 7,\n                        pointHitRadius: 7\n                    },\n                    {\n                        label: \"Test2\",\n                        data: [4, 4, 3, 3, 3, 2, 1, 5, 4, 3, 1, 2, 3, 4, 3, 2, 1, 5, 4,],\n                        backgroundColor: [\n                            \"#eb94db\"\n                        ],\n                        borderColor: \"#eb94db\",\n                        borderWidth: 7,\n                        fill: false,\n                        pointRadius: 7,\n                        pointHoverRadius: 7,\n                        pointHitRadius: 7\n                    }                    \n                ]\n            },\n            options: {\n                // title: {\n                //     display: true,\n                //     text: 'Symptoms Over Time'\n                //   },\n                legend: {position:\"top\", labels:{boxWidth: 10}},\n                'onClick' : (evt, item) => { \n                    var thisPoint = myChart.getElementAtEvent(evt)[0];\n                    //var day = item[0]['_model'].label this.selectedDay = day this.renderHourlyBarChart();\n                    if(thisPoint !== undefined){\n                        //console.log(thisPoint);\n                        //console.log(thisPoint._chart.legend.legendItems[thisPoint._datasetIndex].text);\n                        //console.log(thisPoint._index);\n                        if(thisPoint._chart.legend.legendItems[thisPoint._datasetIndex].text === \"General Feeling\"){\n                            let addedText = \"On \" + this.state.myLabels[thisPoint._index] + \", concerning your General Feeling you wrote: \";\n                            this.renderExtraText(this.state.GeneralFeelingTexts, thisPoint._index, addedText);\n                        }\n                        if(thisPoint._chart.legend.legendItems[thisPoint._datasetIndex].text === \"Pain\"){\n                            let addedText = \"On \" + this.state.myLabels[thisPoint._index] + \", concerning your Pain you wrote: \";\n                            this.renderExtraText(this.state.PainTexts, thisPoint._index, addedText);\n                        }\n                    } \n                },\n                scales: {\n                    scaleOverride : true,\n                    scaleSteps : 1,\n                    scaleStepWidth : 1,\n                    scaleStartValue : 0,\n                    // xAxes: [{\n                    //     type: \"time\",\n                    //     time: {\n                    //       unit: 'hour',\n                    //       unitStepSize: 12,\n                    //       round: 'hour',\n                    //       tooltipFormat: \"h:mm:ss a\",\n                    //       displayFormats: {\n                    //         hour: 'MMM D, h:mm A'\n                    //       }\n                    //     }\n                    //   }],\n                    yAxes: [{\n                        ticks: {\n                            beginAtZero: true,\n                            max: 5,\n                            min: 1,\n                            stepSize: 1 \n                        }\n                    }],\n                    xAxes: [{\n                        ticks: {\n                            minRotation: 0,\n                            maxRotation: 0 \n                        }\n                    }]\n                },\n                // Container for pan options\n                pan: {\n                    // Boolean to enable panning\n                    enabled: true,\n\n                    // Panning directions. Remove the appropriate direction to disable \n                    // Eg. 'y' would only allow panning in the y direction\n                    mode: 'x'\n                },\n\n                // Container for zoom options\n                zoom: {\n                    // Boolean to enable zooming\n                    enabled: true,\n\n                    // Zooming directions. Remove the appropriate direction to disable \n                    // Eg. 'y' would only allow zooming in the y direction\n                    mode: 'x',\n                }\n            }\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"pageContent\" id=\"pageContent\">\n                <canvas className=\"graphContent\"\n                    // style={{ width: 300, height: 300 }}\n                    ref={node => (this.node = node)}\n                />\n                <div className=\"extraText\">\n                    {this.state.extraText}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Graph;","import React from 'react';\n// import ReactDOM from 'react-dom';\nimport './index.css';\n\n/*Toggle is the Toggle select element */\nimport Toggle from './toggle';\n/*Page is where I define the different pages */\nimport Page from './Page';\n/*Graph is where I define the graph class */\nimport Graph from './graph';\n/*BrowserRouter and so on are elements of react-router-dom to enable Routing  */\nimport { BrowserRouter as Router, Link, Route } from 'react-router-dom';\n\nclass Navbar extends React.Component {\n    // constructor(props) {\n    //     super(props);\n    // }\n\n    render() {\n        let cName;\n        if (this.props.isToggleOn) { cName = \"sidebarMenuShadow\" }\n        else { cName = \"\" }\n\n        return (\n            <Router>\n                <div>\n                    <div className=\"header\">\n                        <div className=\"headerText\">IFEELU</div>\n                        <div className=\"logo\">\n                            <a href=\"https://www.youtube.com/\">\n                                <img src=\"https://drive.google.com/uc?id=14MW9Z9pz9of-krcV5qLRLs_gvjmE1Sny\" alt=\"IFeelU Logo\" />\n                            </a>\n                        </div>\n                    </div>\n                    <input type=\"checkbox\" className=\"openSidebarMenu\" id=\"openSidebarMenu\"\n                        /*setState changes the state and re-renders the page on changes */\n                        onClick={this.props.toggleState} checked={this.props.isToggleOn}\n                        onChange={this.props.toggleState}/>\n                    <label htmlFor=\"openSidebarMenu\" className=\"sidebarIconToggle\">\n                        <div className=\"spinner diagonal part-1\"></div>\n                        <div className=\"spinner horizontal\"></div>\n                        <div className=\"spinner diagonal part-2\"></div>\n                    </label>\n                    {/* {console.log(this.state.isToggleOn + \" \" + cName)} */}\n                    <div id=\"sidebarMenu\" className={cName}>\n                        <ul className=\"sidebarMenuInner\">\n                            {/*<Link> changes the URL*/}\n                            <li onClick={this.props.toggleState}>\n                                <Link to={`/`}>Barak Brudo <span>Web Developer</span></Link></li>\n                            <li onClick={this.props.toggleState}>\n                                <Link to={`/graph`}>Graph</Link></li>\n                            <li onClick={this.props.toggleState}>\n                                <Link to={`/pages/Instagram`}>Instagram</Link></li>\n                            <li onClick={this.props.toggleState}>\n                                <Link to={`/pages/Twitter`}>Twitter</Link></li>\n                            <li onClick={this.props.toggleState}>\n                                <Link to={`/pages/YouTube`}>YouTube</Link></li>\n                            <li onClick={this.props.toggleState}>\n                                <Link to={`/pages/Linkedin`}>Linkedin</Link></li>\n                        </ul>\n                    </div>\n                    <div className='wrapper'>\n                        {/*<Route> changes the content of this div (wrapper) based onb the URL*/}\n                        <Route exact={true} path='/' component={Home} />\n                        <Route path='/pages/:id' component={Page} />\n                        <Route exact={true} path='/:id' component={Graph} />\n                    </div>\n                </div>\n            </Router>\n        );\n    }\n}\n\nconst Home = ({ match }) => {\n    return (\n        <div className=\"pageContent\" id=\"pageContent\">\n            <div className=\"pageTopText\">I would like to track:</div>\n            <div className=\"trackBox\">\n                <Toggle toggleName={\"General Feeling\"} initToggle={\"true\"} />\n                <Toggle toggleName={\"Appetite\"} initToggle={\"false\"} />\n                <Toggle toggleName={\"Nausea\"} initToggle={\"false\"} />\n                <Toggle toggleName={\"Bowel Movements\"} initToggle={\"false\"} />\n                <Toggle toggleName={\"Motivation\"} initToggle={\"false\"} />\n                <Toggle toggleName={\"Pain\"} initToggle={\"true\"} />\n                <Toggle toggleName={\"Dizziness\"} initToggle={\"false\"} />\n                <Toggle toggleName={\"Exhaustion\"} initToggle={\"false\"} />\n            </div>\n            <div className=\"buttonArea\">\n                <button className=\"button buttonBack\">Back</button>\n                <button className=\"button buttonNext\">Next</button>\n            </div>\n        </div>\n    );\n}\n\nexport default Navbar;","//This is the main page f the app\n//Start this app by typing: 'npm start' in a terminal \nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n/*Navbar is the navbar for all pages */\nimport Navbar from './navbar';\n\n/*PageWrap is the class encomassing all the pages wrapped in <Router>. \nThe Nav bar is always ther and under it are the various pages represented by\n<Route.. */\nclass PageWrap extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { isToggleOn: false };\n    }\n\n    toggleState = () => {\n        this.setState({ isToggleOn: !this.state.isToggleOn });\n    }\n\n    render() {\n        // let cName;\n        // if (this.state.isToggleOn) { cName = \"sidebarMenuShadow\" }\n        // else { cName = \"\" }\n\n        return (\n            <div>\n                <Navbar toggleState={this.toggleState} isToggleOn={this.state.isToggleOn}/>\n            </div>\n        );\n    }\n}\n\n\nfunction main() {\n    return (\n        <div id=\"App\">\n            <PageWrap pageWrapId={\"pageContent\"} outerContainerId={\"App\"} />\n        </div>\n    );\n}\n\nReactDOM.render(main(), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}